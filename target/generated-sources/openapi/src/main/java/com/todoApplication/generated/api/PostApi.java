/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.todoApplication.generated.api;

import com.todoApplication.generated.model.Post;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-10-22T20:52:43.424709800-04:00[America/New_York]")
@Validated
@Api(value = "post", description = "the post API")
public interface PostApi {

    /**
     * POST /post/add : Add a new todo to the list of todos
     *
     * @param body Todo object that needs to be added (required)
     * @return Request Ok (status code 200)
     */
    @ApiOperation(value = "Add a new todo to the list of todos", nickname = "createPostByMethodPOST", notes = "", tags={ "Life Cycle Methods", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Request Ok") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/post/add",
        consumes = { "application/json" }
    )
    Mono<ResponseEntity<Void>> createPostByMethodPOST(@ApiParam(value = "Todo object that needs to be added" ,required=true )  @Valid @RequestBody Mono<Post> body, @ApiIgnore final ServerWebExchange exchange);


    /**
     * DELETE /post/{postId} : Deletes a post
     *
     * @param postId Post id to delete (required)
     * @return Invalid ID supplied (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Deletes a post", nickname = "deletePostByMethodDELETE", notes = "", tags={ "Life Cycle Methods", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/post/{postId}"
    )
    Mono<ResponseEntity<Void>> deletePostByMethodDELETE(@ApiParam(value = "Post id to delete",required=true) @PathVariable("postId") Long postId, @ApiIgnore final ServerWebExchange exchange);


    /**
     * GET /post/findByStatus : Find post by status
     * Status that are at different lifecycle stages
     *
     * @param status Status values that need to be considered for filter (required)
     * @return response is valid. (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Find post by status", nickname = "getListOfPostsByMethodGET", notes = "Status that are at different lifecycle stages", response = Post.class, responseContainer = "List", tags={ "Life Cycle Methods", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "response is valid.", response = Post.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/post/findByStatus",
        produces = { "application/json" }
    )
    Mono<ResponseEntity<Flux<Post>>> getListOfPostsByMethodGET(@NotNull @ApiParam(value = "Status values that need to be considered for filter", required = true, allowableValues = "completed, pending, archived") @Valid @RequestParam(value = "status", required = true) List<String> status, @ApiIgnore final ServerWebExchange exchange);


    /**
     * GET /post/{postId} : Find post by id
     * Returns a single post
     *
     * @param postId ID of post to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Find post by id", nickname = "getPostByMethodGET", notes = "Returns a single post", response = Post.class, tags={ "Life Cycle Methods", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Post.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/post/{postId}",
        produces = { "application/json" }
    )
    Mono<ResponseEntity<Post>> getPostByMethodGET(@ApiParam(value = "ID of post to return",required=true) @PathVariable("postId") Long postId, @ApiIgnore final ServerWebExchange exchange);

}
